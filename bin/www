#!/usr/bin/env node

'use strict';

const async = require('async');
const debug = require('debug')('app:www');
const error = require('debug')('app:error'); // TODO didn't go to stderr??? https://www.npmjs.com/package/debug
const http = require('http');
const mqtt = require('mqtt');
const SerialPort = require('serialport');
const config = require('../config.json');


function initializeSerial(done) {
    const serialOptions = {
        baudrate: 2400,
        dataBits: 8,
        stopBits: 1,
        parity: 'none',
        parser: SerialPort.parsers.readline('\r')
    };
    const serial = new SerialPort(config.paradox.serial.port, serialOptions);

    serial.on('open', () => {
        debug('serial port connected.');
        return done(null, serial);
    });
}

function initializeMQTT(done) {
    let callback = false;

    const {
        host,
        stateTopic,
        commandTopic
    } = config.homeAssistant.mqtt;
    const client = mqtt.connect(host, { clientId: 'smartbox_ha_paradox' });

    client.on('connect', () => {
        debug('mqtt connected.');
        client.subscribe(stateTopic);
        client.subscribe(commandTopic);

        if (!callback) {
            callback = true;
            done(null, client);
        }
    });

    client.on('offline', () => {
        const err = new Error('mqtt server offline.');
        if (!callback) {
            callback = true;
            return done(err);
        }
        error(err); // TODO fail loudly. shut down process?
    });

    client.on('error', (err) => {
        if (!callback) {
            callback = true;
            return done(err);
        }
        error(err); // TODO fail loudly. shut down process?
    });
}


async.parallel([
    initializeSerial,
    initializeMQTT
], (err, [serial, mqtt]) => {

    if (err) {
        error(err);
        process.exit(1);
        return;
    }

    /* Initialize App */

    const app = require('../app')(serial, mqtt);

    /* Get port from environment and store in Express. */
    // normalize a port into a number, string, or false.
    function normalizePort(val) {
        const port = parseInt(val, 10);

        if (isNaN(port)) {
            return val; // named pipe
        }

        if (port >= 0) {
            return port; // port number
        }

        return false;
    }

    const port = normalizePort(process.env.PORT || '3000');
    app.set('port', port);


    /* Create HTTP server. */

    const server = http.createServer(app);

    server.listen(port);

    server.on('error', (err) => {
        if (err.syscall !== 'listen') {
            throw err;
        }

        const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

        // handle specific listen errors with friendly messages
        switch (err.code) {
            case 'EACCES':
                error(`${bind} requires elevated privileges`); // TODO didn't go to stderr??? https://www.npmjs.com/package/debug
                process.exit(1);
                break;
            case 'EADDRINUSE':
                error(`${bind} is already in use`); // TODO didn't go to stderr??? https://www.npmjs.com/package/debug
                process.exit(1);
                break;
            default:
                throw err;
        }
    });

    server.on('listening', () => {
        const addr = server.address();
        const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
        debug(`Listening on ${bind}`);
    });
});
